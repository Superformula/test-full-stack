service:
  name: superformula-fs
  publish: false

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-appsync-plugin
  - serverless-appsync-offline

provider:
  name: aws
  region: us-east-1
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  environment:
    LOG_ENABLED: ${self:custom.env.${self:provider.stage}.log_enabled}
    LOG_LEVEL: ${self:custom.env.${self:provider.stage}.log_level}
    MAPBOX_API_TOKEN: ${self:custom.env.${self:provider.stage}.mapbox_token}

functions:
  getLocation:
    handler: handler.locationHandler

custom:
  env:
    dev:
      log_level: debug
      log_enabled: 'true'
      mapbox_token: ${env:MAPBOX_TOKEN, ''}
    prod:
      log_level: info
      log_enabled: ${env:LOG_ENABLED, 'true'}
      mapbox_token: ${env:MAPBOX_TOKEN, ''}
  appsync-offline:
    port: 62222
    dynamodb:
      server:
        port: 8000
  accountId: ${env:AWS_ACCOUNT_ID}
  appSync:
    name: SuperFormulaAPI
    authenticationType: API_KEY
    serviceRole: AppSyncServiceRole
    mappingTemplates:
      - dataSource: Users
        type: Mutation
        field: createUser
        request: 'createUser.request.vtl'
        response: 'createUser.response.vtl'
      - dataSource: Users
        type: Query
        field: user
        request: 'getUser.request.vtl'
        response: 'getUser.response.vtl'
      - dataSource: Users
        type: Query
        field: users
        request: 'listUsers.request.vtl'
        response: 'listUsers.response.vtl'
      - dataSource: Users
        type: Query
        field: filterUsers
        request: 'filterUsers.request.vtl'
        response: 'filterUsers.response.vtl'
      - dataSource: Users
        type: Mutation
        field: deleteUser
        request: 'deleteUser.request.vtl'
        response: 'deleteUser.response.vtl'
      - dataSource: Users
        type: Mutation
        field: updateUser
        request: 'updateUser.request.vtl'
        response: 'updateUser.response.vtl'
      - dataSource: LambdaLocation
        type: Query
        field: getLocation
        request: 'getLocation.request.vtl'
        response: 'getLocation.response.vtl'

    dataSources:
      - type: AMAZON_DYNAMODB
        name: Users
        description: 'Users Table'
        config:
          tableName: { Ref: UserTable }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: LambdaLocation
        description: 'Location Lambda Source'
        config:
          functionName: getLocation
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }

resources:
  Resources:
    UserTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: 'Users'
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: dob
            AttributeType: S
          - AttributeName: address
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: name-index
            KeySchema:
              - AttributeName: name
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: dob-index
            KeySchema:
              - AttributeName: dob
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: address-index
            KeySchema:
              - AttributeName: address
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    AppSyncDynamoDBServiceRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: 'Dynamo-${self:custom.appSync.serviceRole}'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'appsync.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: 'Dynamo-${self:custom.appSync.serviceRole}-Policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'dynamodb:Query'
                    - 'dynamodb:BatchWriteItem'
                    - 'dynamodb:GetItem'
                    - 'dynamodb:DeleteItem'
                    - 'dynamodb:PutItem'
                    - 'dynamodb:Scan'
                    - 'dynamodb:UpdateItem'
                  Resource:
                    - 'arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/Users'
                    - 'arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/Users/*'
                    - 'arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/Tweets'
                    - 'arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/Tweets/*'
    AppSyncLambdaServiceRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: 'Lambda-${self:custom.appSync.serviceRole}'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'appsync.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: 'Lambda-${self:custom.appSync.serviceRole}-Policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'lambda:invokeFunction'
                  Resource:
                    - 'arn:aws:lambda:${self:provider.region}:${self:custom.accountId}:function:${self:service.name}-${self:provider.stage}-getLocation'
                    - 'arn:aws:lambda:${self:provider.region}:${self:custom.accountId}:function:${self:service.name}-${self:provider.stage}-getLocation:*'
